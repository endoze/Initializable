{
  "name": "Initializable",
  "tagline": "Application Initializer Protocols",
  "body": "Initializable is a set of protocols that allow you to initialize third party\r\nframeworks and other settings on app launch. It also allows your frameworks\r\nto tie into `applicationDidEnterForeground`.\r\n\r\n[![Build Status](https://travis-ci.org/endoze/Initializable.svg)](https://travis-ci.org/endoze/Initializable)\r\n[![Coverage Status](https://coveralls.io/repos/github/endoze/Initializable/badge.svg?branch=master)](https://coveralls.io/github/endoze/Initializable?branch=master)\r\n[![License](https://img.shields.io/cocoapods/l/Initializable.svg?style=flat)](http://cocoapods.org/pods/Initializable)\r\n[![Platform](https://img.shields.io/cocoapods/p/Initializable.svg?style=flat)](http://cocoadocs.org/docsets/Initializable)\r\n[![CocoaPods](https://img.shields.io/cocoapods/v/Initializable.svg?style=flat)](https://img.shields.io/cocoapods/v/Initializable.svg)\r\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\r\n\r\n## Motivation\r\n\r\nWhen building new applications, how many times do you pollute\r\n`application:didFinishLaunchingWithOptions` with plenty of code initializing\r\nthird party frameworks or other app wide settings? This framework is designed\r\nto help cut down on the noise in your AppDelegate and allow this code to be\r\nseparated into objects each with their own responsibility.\r\n\r\n## Features\r\n\r\n- Small public API surface\r\n- Works with your own custom objects\r\n- Customizeable via method implementation\r\n- Well documented\r\n- Tested\r\n- Support For Cocoapods/Carthage integration\r\n\r\n## Installation\r\n\r\n### Carthage\r\n\r\nAdd the following to your Cartfile:\r\n\r\n```\r\ngithub \"Endoze/Initializable\"\r\n```\r\n\r\nThen add the framework as a linked framework.\r\n\r\n### CocoaPods\r\n\r\nAdd the following to your Podfile:\r\n\r\n```\r\npod 'Initializable'\r\n```\r\n\r\nThen run `pod install`\r\n\r\n## Show me the code\r\n\r\nIf your language of choice is Swift:\r\n\r\n```Swift\r\n// ThirdpartyInitializer.swift\r\n\r\nimport Initializable\r\n\r\nclass ThirdpartyInitializer: NSObject, Initializable {\r\n  func performWithConfiguration(configuration: Configuration) {\r\n    let apiKey = configuration.configurationValueForService(\"ThirdParty\", \"apiKey\")\r\n    let _ = Thirdparty(apiKey: apiKey)\r\n  }\r\n\r\n  func shouldPerformWhenApplicationEntersForeground() -> Bool {\r\n    return false\r\n  }\r\n}\r\n```\r\n\r\n```Swift\r\n// AppDelegate.swift\r\n\r\nimport UIKit\r\n\r\n@UIApplicationMain\r\nclass AppDelegate: UIResponder, UIApplicationDelegate {\r\n  let initializers: [Initializable] = [\r\n    ThirdPartyInitializer(),\r\n  ]\r\n  let configuration = Configuration.defaultConfiguration()\r\n\r\n  func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\r\n    for initializer in initializers {\r\n      initializer.performWithConfiguration(configuration: configuration)\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  func applicationWillEnterForeground(application: UIApplication) {\r\n    for initializer in initializers {\r\n      if initializer.respondsToSelector(#selector(Initializable.shouldPerformWhenApplicationEntersForeground)) {\r\n        initializer.performWithConfiguration(configuration)\r\n      }\r\n    }\r\n  }\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nOr if you prefer Objective-C:\r\n\r\n```objective-c\r\n// ThirdpartyInitializer.h\r\n\r\n#import <Foundation/Foundation.h>\r\n#import <Initializable/Initializable.h>\r\n\r\n@interface ThirdpartyInitializer <Initializable>\r\n\r\n@end\r\n```\r\n\r\n```objective-c\r\n// ThirdpartyInitializer.m\r\n\r\n#import \"ThirdpartyInitializer.h\"\r\n\r\n@implementation ThirdpartyInitializer\r\n\r\n- (void)performWithConfiguration:(id<Configurable>)configuration\r\n{\r\n  NSString *apiKey = [configuration configurationValueForService:@\"Thirdparty\" key:@\"apiKey\"];\r\n  [Thirdparty initWithApiKey:apiKey];\r\n}\r\n\r\n- (BOOL)shouldPerformWhenApplicationEntersForeground\r\n{\r\n  return NO;\r\n}\r\n\r\n@end\r\n```\r\n\r\n```objective-c\r\n// AppDelegate.m\r\n\r\n#import \"AppDelegate.h\"\r\n#import <Initializable/Initializable.h>\r\n\r\n@interface AppDelegate ()\r\n\r\n@property (nonatomic, strong) NSArray<id<Initializable>> *initializers;\r\n\r\n@end\r\n\r\n@implementation AppDelegate\r\n\r\n- (void)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n  [self.initializers makeObjectsPerformSelector:@selector(performWithConfiguration:) withObject:[Configuration defaultConfiguration]];\r\n\r\n  return YES\r\n}\r\n\r\n- (void)applicationWillEnterForeground:(UIApplication *)application\r\n{\r\n  [self.initializers enumerateObjectsUsingBlock:^void(id<Initializer> initializer, NSUInteger index, BOOL *stop) {\r\n    if ([initializer respondsToSelector:@selector(shouldPerformWhenApplicationEntersForeground)] &&\r\n        [initializer shouldPerformWhenApplicationEntersForeground]) {\r\n      [initializer performWithConfiguration:[Configuration defaultConfiguration]];\r\n    }\r\n  }];\r\n}\r\n\r\n- (NSArray<id <Initializer>> *)initializers\r\n{\r\n  if (!_initializers) {\r\n    _initializers = @[\r\n      [ThirdPartyInitializer new],\r\n    ];\r\n  }\r\n\r\n  return _initializers;\r\n}\r\n\r\n@end\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}